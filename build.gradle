buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle-experimental:0.8.3'
        classpath 'com.android.tools.build:gradle:2.2.3'
        classpath 'com.google.gms:google-services:3.0.0'
        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.6.3'
    }
}
apply plugin: 'com.android.model.application'
apply plugin: 'com.github.kt3k.coveralls'

def signConf
def reportsUserLocal = reportsUser
def reportsPasswordLocal = reportsPassword
def googleAppIdLocal = googleAppId
def googleApiKeyLocal = googleApiKey

repositories {
    jcenter()
}

allprojects {
    repositories {
        jcenter()
        mavenCentral()
    }
}

model {
    android {
        compileSdkVersion rootProject.ext.compileSdkVersion
        buildToolsVersion rootProject.ext.buildToolsVersion

        defaultConfig {
            minSdkVersion.apiLevel 10
            targetSdkVersion.apiLevel 25
            testApplicationId 'com.github.randoapp.test'
            testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'

            resValues.with {
                create() {
                    type = "string"
                    name = "google_app_id"
                    value = googleAppIdLocal
                }

                create() {
                    type = "string"
                    name = "google_api_key"
                    value = googleApiKeyLocal
                }
            }

            buildConfigFields.with {
                create() {
                    type = "String"
                    name = "RANDO_REPORTS_USER"
                    value = reportsUserLocal
                }
                create() {
                    type = "String"
                    name = "RANDO_REPORTS_PASSWORD"
                    value = reportsPasswordLocal
                }
            }
        }
    }

    android.packagingOptions {
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LGPL2.1'
        exclude 'META-INF/maven/*'
        exclude 'META-INF/maven/com.google.guava/guava/pom.properties'
        exclude 'META-INF/maven/com.google.guava/guava/pom.xml'
        exclude 'asm-license.txt'
    }

    android.buildTypes {
        debug {
            debuggable true
            minifyEnabled false
            testCoverageEnabled false
            buildConfigFields.with {
                create() {
                    type = "String"
                    name = "RANDO_HOST"
                    value = '"dev.rando4.me"'
                }
                create() {
                    type = "String"
                    name = "RANDO_API_HOST"
                    value = '"dev.rando4.me"'
                }
                create() {
                    type = "String"
                    name = "RANDO_REPORTS_ACRA_DB"
                    value = '"acra-rando4me-dev"'
                }
            }
        }
        release {
            proguardFiles.add(file("proguard-rules.pro"))
            signingConfig = signConf // <-- Sign Config
            minifyEnabled false
            testCoverageEnabled false
            buildConfigFields.with {
                create() {
                    type = "String"
                    name = "RANDO_HOST"
                    value = '"rando4.me"'
                }
                create() {
                    type = "String"
                    name = "RANDO_API_HOST"
                    value = '"api.rando4.me"'
                }
                create() {
                    type = "String"
                    name = "RANDO_REPORTS_ACRA_DB"
                    value = '"acra-rando4me"'
                }
            }
        }
    }

    android.signingConfigs {
        create("signRelease") {
            storeFile file(System.getenv("HOME") + "/.android/rando.keystore")
            storePassword keyStorePassword
            keyAlias 'rando'
            keyPassword keyStorePassword
            signConf = it
        }
    }
}

coveralls {
    jacocoReportPath = "${buildDir}/reports/coverage/debug/report.xml"
}

tasks.coveralls {
    dependsOn 'connectedAndroidTest'
    onlyIf { System.env.'CI' }
}

/*configurations.all {
    resolutionStrategy {
        force 'com.android.support:support-annotations:25.0.1'
    }
}*/

dependencies {
    compile project(':volley')
    compile project(':cameraview')

    compile 'com.android.support:appcompat-v7:25+'
    compile 'com.makeramen:roundedimageview:2.3.0'
    compile 'ch.acra:acra:4.9.2'

    compile 'com.google.android.gms:play-services-auth:10.0.1'
    compile 'com.google.firebase:firebase-core:10.0.1'
    compile 'com.google.firebase:firebase-messaging:10.0.1'
    compile 'com.google.firebase:firebase-crash:10.0.1'

    compile 'com.evernote:android-job:1.1.3'
    compile "com.android.support:exifinterface:25+"

    androidTestCompile 'com.android.support.test:runner:0.5'
    androidTestCompile 'com.android.support.test:rules:0.5'
    androidTestCompile 'com.android.support:support-annotations:25+'
    androidTestCompile 'com.android.support.test.espresso:espresso-core:2.2.2'
    androidTestCompile 'com.squareup:javawriter:2.1.1'
    androidTestCompile 'javax.annotation:javax.annotation-api:1.2'
    androidTestCompile 'javax.inject:javax.inject:1'
    androidTestCompile 'com.google.code.findbugs:jsr305:1.3.9'
    androidTestCompile 'com.squareup.dagger:dagger:1.1.0'
    androidTestCompile 'com.squareup.dagger:dagger-compiler:1.1.0'
    androidTestCompile 'org.mockito:mockito-core:1.9.5'
    androidTestCompile 'com.google.dexmaker:dexmaker-mockito:1.2'
    androidTestCompile 'com.google.dexmaker:dexmaker:1.2'
    androidTestCompile 'com.google.guava:guava:19.0'
    androidTestCompile 'org.hamcrest:hamcrest-library:1.3'
    androidTestCompile 'com.squareup.assertj:assertj-android:1.1.1'
}

ext {
    compileSdkVersion = 25
    buildToolsVersion = "25.0.2"
    minSdkVersion = 9
    targetSdkVersion = 25
    supportLibraryVersion = '25.0.1'
}

apply plugin: 'com.google.gms.google-services'
